* Ruboto Benchmark
** Purpose
We already have had a [[https://github.com/ruboto/ruboto_benchmark_client][Ruboto benchmark client]], however as we want to know some more details about JRuby libraries loading process. We're going to implement a more detailed benchmark client based on the existing one.

** Enable JRuby load timer
We can make it on PC directly by run =jruby -J-Djruby.debug.loadService=true -J-Djruby.debug.loadService.timing=true /path/to/script.rb=. Then we will get JRuby's LoadService log, here's an example
#+begin_quote
... \\
2013-06-19T19:29:58.278+08:00: LoadService:         <- jruby/java/java_module - 32ms \\
2013-06-19T19:29:58.307+08:00: LoadService:         <- jruby/java/java_package_module_template - 28ms \\
2013-06-19T19:29:58.329+08:00: LoadService:         <- jruby/java/java_utilities - 21ms \\
2013-06-19T19:29:59.333+08:00: LoadService:   <- classloader:jruby/kernel.rb - 376ms \\
... \\
#+end_quote

** Enable JRuby load timer on Dalvik
We can enable it similarly on Dalvik by uncomment two lines of code in =org.ruboto.JRubyAdapater=
#+begin_src java
            System.setProperty("jruby.debug.loadService", "true");
            System.setProperty("jruby.debug.loadService.timing", "true");
#+end_src
After that, we can see similar log in Logcat tagged System.err.

** Access loadtime data with java code.
When the property =jruby.debug.loadService.timing= is true, JRuby sets a constant named =DEBUG_LOAD_TIMINGS=. Then it will enable =TracingLoadTimer= in =org.jruby.runtime.load.LoadService= which extents the default =LoadTimer=.

Maybe we should add something here to access the loading time in Ruboto.
#+begin_src java
        public void endLoad(String file, long startTime) {
            LOG.info(getIndentString() + "<- " + file + " - "
                    + (System.currentTimeMillis() - startTime) + "ms");
            indent.decrementAndGet();
        }
#+end_src

